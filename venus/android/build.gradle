android {

    /**
     * Builds an Android version code from the version of the project.
     * This is designed to handle the -SNAPSHOT and -RC format.
     *
     * I.e. during development the version ends with -SNAPSHOT. As the code stabilizes and release nears
     * one or many Release Candidates are tagged. These all end with "-RC1", "-RC2" etc.
     * And the final release is without any suffix.
     * @return
     */
	ext.buildVersionCode = {
		//The rules is as follows:
		//-SNAPSHOT counts as 0
		//-RC* counts as the RC number, i.e. 1 to 98
		//final release counts as 99.
		//Thus you can only have 98 Release Candidates, which ought to be enough for everyone

		def candidate = "99"
		def (major, minor, patch) = version.toLowerCase().replaceAll('-', '').tokenize('.')

		if(major == null)
			major = "0";
		if(minor == null)
			minor = "0";
		if(patch == null)
			patch = "0";

		if (patch.endsWith("snapshot")) {
			candidate = "0"
			patch = patch.replaceAll("[^0-9]","")
		} else {
			def rc
			(patch, rc) = patch.tokenize("rc")
			if (rc) {
				candidate = rc
			}
		}

		(major, minor, patch, candidate) = [major, minor, patch, candidate].collect{it.toInteger()}

		(major * 1000000) + (minor * 10000) + (patch * 100) + candidate;
	}

    buildToolsVersion latestBuildToolsAvailable("19.0.0")
    compileSdkVersion highestSdkAvailable(19)

    defaultConfig {
        versionCode buildVersionCode()
        versionName version
    }

    if(project.hasProperty("hd")) {

    	defaultConfig.versionCode 2 * 10000000 + defaultConfig.versionCode

    	aaptOptions {
    		noCompress "png", "jpg"
    		ignoreAssetsPattern "0.5:0.25"
    	}
    } else if(project.hasProperty("sd")) {

    	defaultConfig.versionCode 1 * 10000000 + defaultConfig.versionCode

     	aaptOptions {
    		noCompress "png", "jpg"
    		ignoreAssetsPattern "1"
     	}
    }

    println "Version: $version Version Code: $defaultConfig.versionCode"

    sourceSets {
    	main {
			if(project.hasProperty("hd")) {
    			manifest.srcFile 'AndroidManifestHD.xml'
    		} else {
            	manifest.srcFile 'AndroidManifest.xml'
            }

            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

        instrumentTest.setRoot('tests')
    }


    defaultConfig {
        applicationId "org.bladecoder.engine"
        minSdkVersion 15
        targetSdkVersion 23
    }

	if(project.hasProperty('keystore')) {
          signingConfigs {
            release {
            storeFile file(project.keystore)
            storePassword project.storePassword
            keyAlias project.alias
            keyPassword project.keyPassword
            }
          }

		  buildTypes {
           	release {
            	signingConfig signingConfigs.release
             }
          }
    }

}


// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if(outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'org.bladecoder.engine/com.bladecoder.engine.android.AndroidLauncher'
}

// sets up the Android Eclipse project, using the old Ant based build.
eclipse {
    // need to specify Java source sets explicitely, SpringSource Gradle Eclipse plugin
    // ignores any nodes added in classpath.file.withXml
    sourceSets {
        main {
            java.srcDirs "src", 'gen'
        }
    }

    jdt {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
    }

    classpath {
        plusConfigurations += [ project.configurations.compile ]
        containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'
    }

    project {
        name = appName + "-android"
        natures 'com.android.ide.eclipse.adt.AndroidNature'
        buildCommands.clear();
        buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
        buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
        buildCommand "org.eclipse.jdt.core.javabuilder"
        buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
    }
}

// sets up the Android Idea project, using the old Ant based build.
idea {
    module {
        sourceDirs += file("src");
        scopes = [ COMPILE: [plus:[project.configurations.compile]]]

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance();
                builder.current = node;
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value:"true")
                        }
                    }
                }
            }
        }
    }
}

int highestSdkAvailable(int defaultSdk) {
  try {
      def buildToolsDir = new File(android.getSdkDirectory().toString(), "platforms")
      def sdks = buildToolsDir.list([accept:{ d, f-> f.startsWith("android-") && new File(d, f).isDirectory() }] as FilenameFilter).sort { a, b -> b <=> a }
      def highestSdk = sdks[0]
      if (highestSdk != null) {
          println "Using highest found SDK " + highestSdk.substring(8)
          highestSdk.substring(8).toInteger()
      } else {
          println "No installed SDKs found. Using default SDK " + defaultSdk
          defaultSdk
      }
  } catch (any) {
      println "Exception while determining highest SDK. Using default SDK " +
              defaultSdk
      defaultSdk
  }
}

String latestBuildToolsAvailable(String defaultBuildTools) {
  try {
      def buildToolsDir = new File(android.getSdkDirectory().toString(), "build-tools")
      def buildToolsVersions = buildToolsDir.list([accept:{ d, f-> new File(d, f).isDirectory() }] as FilenameFilter).sort { a, b -> b <=> a }
      def latestBuildTools = buildToolsVersions[0]
      if (latestBuildTools != null) {
          println "Using latest found build tools " + latestBuildTools
          latestBuildTools
      } else {
          println "No installed build tools found. Using default build tools " +
                  defaultBuildTools
          defaultBuildTools
      }
  } catch (any) {
      println "Exception while determining latest build tools. Using default build tools " +
              defaultBuildTools
      defaultBuildTools
  }
}
